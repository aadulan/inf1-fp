-- Informatics 1 Functional Programming
-- December 2012
-- SITTING 1 (09:30 - 11:30)

import Test.QuickCheck( quickCheck, 
                        Arbitrary( arbitrary ),
                        oneof, elements, sized  )
import Control.Monad -- defines liftM, liftM2, used below

-- Question 1

-- 1a

f :: Int -> [Int] -> [Int]
f y xs = [ if odd z then y else x |(x,z) <- zip[1..length xs]xs]

test1a = f 0 [1,2,3,4,5]  ==  [0,2,0,4,0] &&
         f 0 [1,2,3,4]    ==  [0,2,0,4] &&
         f 0 []           ==  [] &&
         f 0 [7]          ==  [0]

-- 1b

g :: Int -> [Int] -> [Int]
g y [] = []
g y [z] = [y]
g y (x:z:xs) = y: z: g y xs

test1b = g 0 [1,2,3,4,5]  ==  [0,2,0,4,0] &&
         g 0 [1,2,3,4]    ==  [0,2,0,4] &&
         g 0 []           ==  [] &&
         g 0 [7]          ==  [0]

-- Question 2

-- 2a

p :: [Int] -> Bool
p xs = and [even x | x<- xs , x>=10 && x<= 100]

test2a = p [1,12,153,84,64,9] == True &&
         p [1,12,153,83,9] == False &&
         p [] == True &&
         p [1,151] == True 

-- 2b

q :: [Int] -> Bool
q [] = True
q (x:xs) | x>=10 && x<= 100 = even x && q xs
         | otherwise = q xs

test2b = q [1,12,153,84,64,9] == True &&
         q [1,12,153,83,9] == False &&
         q [] == True &&
         q [1,151] == True
-- 2c

r :: [Int] -> Bool
r xs  = foldr (&&) True (map even (filter betweenNum xs))

betweenNum :: Int->Bool
betweenNum x = x>=10 && x<=10

test2c = r [1,12,153,84,64,9] == True &&
         r [1,12,153,83,9] == False &&
         r [] == True &&
         r [1,151] == True

-- Question 3

data Prop = X
          | F
          | T
          | Not Prop
          | Prop :|: Prop
          deriving (Eq, Ord)

-- turns a Prop into a string approximating mathematical notation

showProp :: Prop -> String
showProp X          =  "X"
showProp F          =  "F"
showProp T          =  "T"
showProp (Not p)    =  "(~" ++ showProp p ++ ")"
showProp (p :|: q)  =  "(" ++ showProp p ++ "|" ++ showProp q ++ ")"

-- For QuickCheck

instance Show Prop where
    show  =  showProp

instance Arbitrary Prop where
    arbitrary  =  sized prop
        where
          prop n | n <= 0     =  atom
                 | otherwise  =  oneof [ atom
                                       , liftM Not subform
                                       , liftM2 (:|:) subform subform
                                       ]
                 where
                   atom = oneof [elements [X,F,T]]
                   subform  =  prop (n `div` 2)

-- 3a

eval :: Prop -> Bool -> Bool
eval X x = x
eval T _ = True
eval F _ = False
eval (Not x) y = not(eval x y)
eval (x :|: y) z = eval x z || eval y z  


test3a = eval (Not T) True                   ==  False &&
         eval (Not X) False                  ==  True &&
         eval (Not X :|: Not (Not X)) True   ==  True &&
         eval (Not X :|: Not (Not X)) False  ==  True &&
         eval (Not (Not X :|: F)) True       ==  True &&
         eval (Not (Not X :|: F)) False      ==  False 

-- remember all the cases !!!!!!!!
-- 3b

simplify :: Prop -> Prop
simplify X = X
simplify T = T
simplify F = F
simplify (Not F) = T
simplify (Not T) = F
simplify (Not X) = Not X
simplify (Not(Not x)) = x
simplify (Not x) = Not (simplify x)
simplify (T :|:p) = T
simplify ( p:|:q) | simplify q == F = simplify p 
                  | simplify q == T = T
                  | simplify p == F = simplify p
                  | simplify p == T = T 
                  | simplify p == simplify q = simplify p 
                  | otherwise =  (simplify p :|: simplify q)

test3b = simplify (Not X :|: Not (Not X))    ==  Not X :|: X &&
         simplify (Not (Not X :|: F))        ==  X &&
         simplify (Not T)                    ==  F &&
         simplify (Not F :|: X)              ==  T &&
         simplify (Not (Not (Not X) :|: X))  ==  Not X
